// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockredis is a generated GoMock package.
package mockredis

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/gomodule/redigo/redis"
	redis0 "github.com/wwwangxc/gopkg/redis"
	reflect "reflect"
)

// MockClientProxy is a mock of ClientProxy interface
type MockClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockClientProxyMockRecorder
}

// MockClientProxyMockRecorder is the mock recorder for MockClientProxy
type MockClientProxyMockRecorder struct {
	mock *MockClientProxy
}

// NewMockClientProxy creates a new mock instance
func NewMockClientProxy(ctrl *gomock.Controller) *MockClientProxy {
	mock := &MockClientProxy{ctrl: ctrl}
	mock.recorder = &MockClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientProxy) EXPECT() *MockClientProxyMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockClientProxy) Do(ctx context.Context, cmd string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, cmd}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockClientProxyMockRecorder) Do(ctx, cmd interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, cmd}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClientProxy)(nil).Do), varargs...)
}

// Conn mocks base method
func (m *MockClientProxy) Conn() redis.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(redis.Conn)
	return ret0
}

// Conn indicates an expected call of Conn
func (mr *MockClientProxyMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockClientProxy)(nil).Conn))
}

// Locker mocks base method
func (m *MockClientProxy) Locker() redis0.LockerProxy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locker")
	ret0, _ := ret[0].(redis0.LockerProxy)
	return ret0
}

// Locker indicates an expected call of Locker
func (mr *MockClientProxyMockRecorder) Locker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locker", reflect.TypeOf((*MockClientProxy)(nil).Locker))
}

// Fetcher mocks base method
func (m *MockClientProxy) Fetcher() redis0.FetcherProxy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetcher")
	ret0, _ := ret[0].(redis0.FetcherProxy)
	return ret0
}

// Fetcher indicates an expected call of Fetcher
func (mr *MockClientProxyMockRecorder) Fetcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetcher", reflect.TypeOf((*MockClientProxy)(nil).Fetcher))
}
