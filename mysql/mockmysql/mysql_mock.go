// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockmysql is a generated GoMock package.
package mockmysql

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	mysql "github.com/wwwangxc/gopkg/mysql"
	reflect "reflect"
)

// MockClientProxy is a mock of ClientProxy interface
type MockClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockClientProxyMockRecorder
}

// MockClientProxyMockRecorder is the mock recorder for MockClientProxy
type MockClientProxyMockRecorder struct {
	mock *MockClientProxy
}

// NewMockClientProxy creates a new mock instance
func NewMockClientProxy(ctrl *gomock.Controller) *MockClientProxy {
	mock := &MockClientProxy{ctrl: ctrl}
	mock.recorder = &MockClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientProxy) EXPECT() *MockClientProxyMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockClientProxy) Exec(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockClientProxyMockRecorder) Exec(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockClientProxy)(nil).Exec), varargs...)
}

// Transaction mocks base method
func (m *MockClientProxy) Transaction(ctx context.Context, f mysql.TxFunc, opts ...mysql.TxOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockClientProxyMockRecorder) Transaction(ctx, f interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockClientProxy)(nil).Transaction), varargs...)
}

// Query mocks base method
func (m *MockClientProxy) Query(ctx context.Context, f mysql.ScanFunc, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, f, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockClientProxyMockRecorder) Query(ctx, f, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, f, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClientProxy)(nil).Query), varargs...)
}

// QueryRow mocks base method
func (m *MockClientProxy) QueryRow(ctx context.Context, dest []interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockClientProxyMockRecorder) QueryRow(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockClientProxy)(nil).QueryRow), varargs...)
}

// Select mocks base method
func (m *MockClientProxy) Select(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockClientProxyMockRecorder) Select(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockClientProxy)(nil).Select), varargs...)
}

// Get mocks base method
func (m *MockClientProxy) Get(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockClientProxyMockRecorder) Get(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientProxy)(nil).Get), varargs...)
}
