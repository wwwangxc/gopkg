// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocketcd is a generated GoMock package.
package mocketcd

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	etcd "github.com/wwwangxc/gopkg/etcd"
	clientv3 "go.etcd.io/etcd/client/v3"
	reflect "reflect"
)

// MockClientProxy is a mock of ClientProxy interface
type MockClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockClientProxyMockRecorder
}

// MockClientProxyMockRecorder is the mock recorder for MockClientProxy
type MockClientProxyMockRecorder struct {
	mock *MockClientProxy
}

// NewMockClientProxy creates a new mock instance
func NewMockClientProxy(ctrl *gomock.Controller) *MockClientProxy {
	mock := &MockClientProxy{ctrl: ctrl}
	mock.recorder = &MockClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientProxy) EXPECT() *MockClientProxyMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockClientProxy) Put(ctx context.Context, key, val string, opts ...clientv3.OpOption) (*clientv3.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*clientv3.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockClientProxyMockRecorder) Put(ctx, key, val interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClientProxy)(nil).Put), varargs...)
}

// Get mocks base method
func (m *MockClientProxy) Get(ctx context.Context, key string, opts ...clientv3.OpOption) (*clientv3.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientProxyMockRecorder) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientProxy)(nil).Get), varargs...)
}

// Delete mocks base method
func (m *MockClientProxy) Delete(ctx context.Context, key string, opts ...clientv3.OpOption) (*clientv3.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*clientv3.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClientProxyMockRecorder) Delete(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientProxy)(nil).Delete), varargs...)
}

// Watch mocks base method
func (m *MockClientProxy) Watch(ctx context.Context, key string, opts ...clientv3.OpOption) (clientv3.WatchChan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(clientv3.WatchChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClientProxyMockRecorder) Watch(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClientProxy)(nil).Watch), varargs...)
}

// Txn mocks base method
func (m *MockClientProxy) Txn(ctx context.Context, cmps []clientv3.Cmp, thenOps, elseOps []clientv3.Op) (*clientv3.TxnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", ctx, cmps, thenOps, elseOps)
	ret0, _ := ret[0].(*clientv3.TxnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Txn indicates an expected call of Txn
func (mr *MockClientProxyMockRecorder) Txn(ctx, cmps, thenOps, elseOps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockClientProxy)(nil).Txn), ctx, cmps, thenOps, elseOps)
}

// Lease mocks base method
func (m *MockClientProxy) Lease() etcd.LeaseProxy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lease")
	ret0, _ := ret[0].(etcd.LeaseProxy)
	return ret0
}

// Lease indicates an expected call of Lease
func (mr *MockClientProxyMockRecorder) Lease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lease", reflect.TypeOf((*MockClientProxy)(nil).Lease))
}

// Locker mocks base method
func (m *MockClientProxy) Locker(prefix string, ttl int) (etcd.LockerProxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locker", prefix, ttl)
	ret0, _ := ret[0].(etcd.LockerProxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locker indicates an expected call of Locker
func (mr *MockClientProxyMockRecorder) Locker(prefix, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locker", reflect.TypeOf((*MockClientProxy)(nil).Locker), prefix, ttl)
}
