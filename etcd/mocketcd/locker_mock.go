// Code generated by MockGen. DO NOT EDIT.
// Source: locker.go

// Package mocketcd is a generated GoMock package.
package mocketcd

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLockerProxy is a mock of LockerProxy interface
type MockLockerProxy struct {
	ctrl     *gomock.Controller
	recorder *MockLockerProxyMockRecorder
}

// MockLockerProxyMockRecorder is the mock recorder for MockLockerProxy
type MockLockerProxyMockRecorder struct {
	mock *MockLockerProxy
}

// NewMockLockerProxy creates a new mock instance
func NewMockLockerProxy(ctrl *gomock.Controller) *MockLockerProxy {
	mock := &MockLockerProxy{ctrl: ctrl}
	mock.recorder = &MockLockerProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLockerProxy) EXPECT() *MockLockerProxyMockRecorder {
	return m.recorder
}

// LockAndCall mocks base method
func (m *MockLockerProxy) LockAndCall(ctx context.Context, f func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAndCall", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAndCall indicates an expected call of LockAndCall
func (mr *MockLockerProxyMockRecorder) LockAndCall(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAndCall", reflect.TypeOf((*MockLockerProxy)(nil).LockAndCall), ctx, f)
}

// Lock mocks base method
func (m *MockLockerProxy) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockLockerProxyMockRecorder) Lock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockerProxy)(nil).Lock), ctx)
}

// TryLock mocks base method
func (m *MockLockerProxy) TryLock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryLock indicates an expected call of TryLock
func (mr *MockLockerProxyMockRecorder) TryLock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockLockerProxy)(nil).TryLock), ctx)
}

// Unlock mocks base method
func (m *MockLockerProxy) Unlock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockLockerProxyMockRecorder) Unlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockerProxy)(nil).Unlock), ctx)
}

// Close mocks base method
func (m *MockLockerProxy) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLockerProxyMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLockerProxy)(nil).Close))
}
